name: Deploy FastAPI, Celery, and RabbitMQ to Windows Server

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  SERVER_IP: ${{ secrets.SERVER_IP }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push FastAPI image to Amazon ECR Public
      id: build-fastapi-image
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: d0v2k3o3
        REPOSITORY: ohmyservice_ai
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG -f Dockerfile.fastapi .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG
        echo "fastapi_image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push Celery image to Amazon ECR Public
      id: build-celery-image
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: d0v2k3o3
        REPOSITORY: ohmyservice_ai
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery-$IMAGE_TAG -f Dockerfile.celery .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery-$IMAGE_TAG
        echo "celery_image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery-$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install SSH client and sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass

    - name: Deploy to Windows Server
      env:
        FASTAPI_IMAGE: ${{ steps.build-fastapi-image.outputs.fastapi_image }}
        CELERY_IMAGE: ${{ steps.build-celery-image.outputs.celery_image }}
        RABBITMQ_IMAGE: rabbitmq:management
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 8022 docker-compose.yml $SSH_USERNAME@$SERVER_IP:"C:/Users/k-net/Desktop/docker-compose.yml"
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 8022 $SSH_USERNAME@$SERVER_IP << EOF
          docker pull $FASTAPI_IMAGE
          docker pull $CELERY_IMAGE
          docker pull $RABBITMQ_IMAGE
          
          docker stop fastapi_app || exit 0
          docker rm fastapi_app || exit 0
          docker stop celery_worker || exit 0
          docker rm celery_worker || exit 0
          docker stop rabbitmq || exit 0
          docker rm rabbitmq || exit 0
          
          docker-compose -f "C:/Users/k-net/Desktop/docker-compose.yml" up -d
        EOF
