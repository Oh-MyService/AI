name: Deploy to Amazon Lightsail

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: d0v2k3o3  # 본인의 alias 입력
          REPOSITORY: ohmyservice_ai  # repository명 설정
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # docker-compose를 사용하여 이미지 빌드
          docker-compose -f docker-compose.yml build

          # 각 서비스에 대해 이미지를 태그 및 ECR로 푸시
          docker tag ai_celery_worker:latest $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery_worker-$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery_worker-$IMAGE_TAG

          docker tag ai_fastapi:latest $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG

          echo "celery_image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:celery_worker-$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "fastapi_image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:fastapi-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install SSH and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Verify Environment Variables
        run: |
          echo "LIGHTSAIL_INSTANCE_IP: $LIGHTSAIL_INSTANCE_IP"
          echo "SSH_USERNAME: $SSH_USERNAME"
          echo "CELERY_IMAGE: ${{ steps.build-image.outputs.celery_image }}"
          echo "FASTAPI_IMAGE: ${{ steps.build-image.outputs.fastapi_image }}"

      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Amazon Lightsail
        env:
          CELERY_IMAGE: ${{ steps.build-image.outputs.celery_image }}
          FASTAPI_IMAGE: ${{ steps.build-image.outputs.fastapi_image }}
        run: |
          echo "Deploying to Lightsail: $LIGHTSAIL_INSTANCE_IP"
          echo "Using CELERY_IMAGE: $CELERY_IMAGE"
          echo "Using FASTAPI_IMAGE: $FASTAPI_IMAGE"

          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$LIGHTSAIL_INSTANCE_IP << EOF
            CELERY_IMAGE=$CELERY_IMAGE
            FASTAPI_IMAGE=$FASTAPI_IMAGE

            sudo docker pull \$CELERY_IMAGE
            sudo docker pull \$FASTAPI_IMAGE

            sudo docker stop oms_AI_Celery || true
            sudo docker rm oms_AI_Celery || true
            sudo docker run -d --gpus all --name oms_AI_Celery \$CELERY_IMAGE

            sudo docker stop oms_AI_FastAPI || true
            sudo docker rm oms_AI_FastAPI || true
            sudo docker run -d --gpus all --name oms_AI_FastAPI -p 27272:80 \$FASTAPI_IMAGE
          EOF
