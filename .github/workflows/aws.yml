name: Deploy FastAPI and Celery to Amazon Lightsail

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push FastAPI and Celery images to Amazon ECR Public
      id: build-images
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        FASTAPI_REPOSITORY: ohmyservice_backend
        CELERY_REPOSITORY: ohmyservice_celery
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push FastAPI image
        docker build --no-cache -t $REGISTRY/$FASTAPI_REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$FASTAPI_REPOSITORY:$IMAGE_TAG

        # Build and push Celery image
        docker build --no-cache -t $REGISTRY/$CELERY_REPOSITORY:$IMAGE_TAG -f Dockerfile.celery .
        docker push $REGISTRY/$CELERY_REPOSITORY:$IMAGE_TAG

        echo "backend_image=$REGISTRY/$FASTAPI_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "celery_image=$REGISTRY/$CELERY_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Copy SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Copy .env file to Lightsail instance
      run: |
        scp -o StrictHostKeyChecking=no .env $SSH_USERNAME@$LIGHTSAIL_INSTANCE_IP:/home/$SSH_USERNAME/.env

    - name: Deploy to Amazon Lightsail
      env:
        BACKEND_IMAGE: ${{ steps.build-images.outputs.backend_image }}
        CELERY_IMAGE: ${{ steps.build-images.outputs.celery_image }}
        RABBITMQ_IMAGE: rabbitmq:management
      run: |
        ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$LIGHTSAIL_INSTANCE_IP << EOF
          BACKEND_IMAGE=${BACKEND_IMAGE}
          CELERY_IMAGE=${CELERY_IMAGE}
          RABBITMQ_IMAGE=${RABBITMQ_IMAGE}

          # Pull the images
          sudo docker pull \\$BACKEND_IMAGE
          sudo docker pull \\$CELERY_IMAGE
          sudo docker pull \\$RABBITMQ_IMAGE

          # Stop and remove existing containers
          sudo docker stop fastapi_app || true
          sudo docker rm fastapi_app || true
          sudo docker stop celery_worker || true
          sudo docker rm celery_worker || true
          sudo docker stop rabbitmq || true
          sudo docker rm rabbitmq || true

          # Run new containers
          sudo docker run -d --name fastapi_app --env-file /home/$SSH_USERNAME/.env -p 27272:8000 \\$BACKEND_IMAGE
          sudo docker run -d --name celery_worker --env-file /home/$SSH_USERNAME/.env \\$CELERY_IMAGE celery -A celery_app worker --loglevel=info
          sudo docker run -d --name rabbitmq -p 22222:15672 -p 23232:5672 \\$RABBITMQ_IMAGE
        EOF
